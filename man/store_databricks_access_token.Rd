% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/databricks_secrets.R
\name{store_databricks_access_token}
\alias{store_databricks_access_token}
\title{Create an Azure authentication token and store it as a Databricks secret
when run on a databricks cluster}
\usage{
store_databricks_access_token(token, url, username)
}
\arguments{
\item{token}{The Azure access token to access the scopes API, and to be
stored as a secret}

\item{url}{The workspace URL of the databricks instance}

\item{username}{The current user's username, for the secret scope}
}
\description{
Create an Azure authentication token and store it as a Databricks secret
when run on a databricks cluster
}
\examples{
\dontrun{
# Set with your tenant_id and app_id. Ensure that this has it's own command
# chunk, so the command will complete after authentication
token <- qiverse.azure::get_az_tk(
  "pbi_df",
  tenant_id = tenant_id,
  app_id_pbi_df = app_id,
  auth_type = "device_code"
)

# Store token as databricks secret
update_secret <- qiverse.azure::store_databricks_access_token(
  token = token,
  url = paste0("https://",
    SparkR::sparkR.conf("spark.databricks.workspaceUrl")),
  user_name =
    SparkR::first(SparkR::sql("SELECT current_user() AS username"))$username
)

# Check whether the HTTP request returned a success code
if(update_secret$status_code == 200) {
  "Token successfully updated"
} else {
  "Error occurred"
}
}
}
\seealso{
Other Azure methods: 
\code{\link{az_authenticated_api_query}()},
\code{\link{db_secret_scopes_api}()},
\code{\link{db_secrets_api}()}
}
\concept{Azure methods}
