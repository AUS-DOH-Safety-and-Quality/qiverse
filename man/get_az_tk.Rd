% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_az_tk.R
\name{get_az_tk}
\alias{get_az_tk}
\title{Generate an Azure authentication token}
\usage{
get_az_tk(
  token_type,
  tenant_id = Sys.getenv("az_tenant_id"),
  app_id_pbi_df = Sys.getenv("az_app_id_pbi_dataflow"),
  app_id_pbi_ds = Sys.getenv("az_app_id_pbi_dataset"),
  graph_api_shp = Sys.getenv("az_graph_api_sharepoint"),
  app_id_shp = Sys.getenv("az_app_id_sharepoint"),
  cli_sec_shp = Sys.getenv("az_cli_secret_id_sharepoint"),
  system_type = "local",
  db_scope = "",
  ...
)
}
\arguments{
\item{token_type}{The type of token to be generated.
This can be either: "pbi_df" for PowerBI Dataflows, "pbi_ds"
for PowerBI datasets, "sp" for SharePoint, "databricks" for the Databricks
API, "key_vault" for Azure Key Vault}

\item{tenant_id}{Your organisation's tenant identifier}

\item{app_id_pbi_df}{The application identifier with access to PowerBI
dataflows}

\item{app_id_pbi_ds}{The application identifier with access to PowerBI
datasets}

\item{graph_api_shp}{The Graph API created for access to SharePoint}

\item{app_id_shp}{The application identifier with access to SharePoint}

\item{cli_sec_shp}{The client secret with access to SharePoint}

\item{system_type}{The system where the package is being called from. Can be
either "local" if running on your local machine or virtual machine, or
"databricks" if running on a databricks instance. The "databricks" option
will pull the token from your secret created using
qiverse.azure::store_databricks_access_token}

\item{...}{Additional arguments to be passed to \code{\link[AzureAuth:get_azure_token]{AzureAuth::get_azure_token()}}, #nolint
such as 'use_cache' or 'auth_type'}
}
\value{
An Azure token to authenticate connections.
}
\description{
Generate an Azure authentication token
}
\examples{
\dontrun{
tk <- get_az_tk('pbi_df')
tk <- get_az_tk('pbi_ds')
tk <- get_az_tk('sp')
tk <- get_az_tk('pbi_df', auth_type = 'device_code')
}
}
